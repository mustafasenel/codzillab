// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRoles {
  DEFAULT
  ADMIN
  MODERATOR
  PRO
  VIP
  PLUS
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  surname          String?
  username         String?   @unique
  email            String    @unique
  tel              String?
  gender           String?
  role             UserRoles @default(DEFAULT)
  emailVerified    DateTime?
  image            String?
  coverImage       String?
  hashedPassword   String?
  bio              String?
  dob              DateTime?
  country          String?
  education        String?
  educationOnStudy Boolean?
  work             String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  //Links
  links String[]

  //Favorites
  genres    String[]
  platforms String[]

  // Relationships
  account               Account[]
  friendRequestSent     FriendRequest[] @relation("FriendRequestsSent")
  friendRequestReceived FriendRequest[] @relation("FriendRequestsReceived")
  gameBodys             GameBody[]
  // Follower/Following Relations
  followers             Follower[]      @relation("followers")
  followings            Follower[]      @relation("followings")
  UserGames             UserGame[]      @relation("UserGames")

  organizationFollowers OrganizationFollower[] @relation("UserOrganizationFollowers")

  // Organizasyon İlişkisi
  ownedOrganizations Organization[]       @relation("UserOrganizations") // Kullanıcının sahip olduğu organizasyonlar
  organizations      OrganizationMember[] @relation("OrganizationMembers") // Organizasyona üye olan kullanıcılar

  posts    Post[]    @relation("UserPosts")
  likes    Like[]    @relation("UserLikes")
  comments Comment[] @relation("UserComments")

  notifications   Notification[] @relation("NotificationReceiver") // Kullanıcının aldığı bildirimler
  actions         Notification[] @relation("NotificationActor")    // Kullanıcının tetiklediği bildirimler

  //////////////  REALTIME CHAT SECTION //////////////////

  servers  Server[] @relation("UserServers")
  members  Member[] @relation("UserMembers")
  channels Channel[] @relation("UserChannels")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Follower {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  followerId  String @db.ObjectId
  followingId String @db.ObjectId

  follower  User @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("followings", fields: [followingId], references: [id], onDelete: Cascade)

  @@index([followerId, followingId], map: "unique_follow")
}

model FriendRequest {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  requesterId String        @db.ObjectId
  recipientId String        @db.ObjectId
  status      RequestStatus @default(PENDING)
  createdAt   DateTime      @default(now())

  requester User @relation("FriendRequestsSent", fields: [requesterId], references: [id])
  recipient User @relation("FriendRequestsReceived", fields: [recipientId], references: [id])

  @@index([requesterId, recipientId], name: "unique_request")
}

model GameBody {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  userId      String       @db.ObjectId
  title       String
  description String
  gameId      String       @db.ObjectId
  image       String?
  type        GameBodyType @default(GAMEMATE)
  searchType  SearchType   @default(LOOKING_FOR) // Eklenen alan
  createdAt   DateTime     @default(now())

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  game Game? @relation("GameFriendRequests", fields: [gameId], references: [id])
}

enum GameBodyType {
  TEAMMATE
  GAMEMATE
}

enum RequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum SearchType {
  LOOKING_FOR // Oyun arkadaşı arıyor
  WANT_TO_JOIN // Mevcut bir oyuna katılmak istiyor
}

model Game {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  name     String     @unique
  genre    String[]
  platform String[]
  image    String?
  players  UserGame[] @relation("GameUsers")
  gameBody GameBody[] @relation("GameFriendRequests")
}

model UserGame {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  gameId String @db.ObjectId

  user User @relation("UserGames", fields: [userId], references: [id], onDelete: Cascade)
  game Game @relation("GameUsers", fields: [gameId], references: [id], onDelete: Cascade)

  @@index([userId, gameId], map: "unique_usergame")
}

model Organization {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  ownerId     String   @db.ObjectId

  logo         String?
  cover        String?
  website      String?
  location     String?
  contactEmail String?
  contactPhone String?
  socialLinks  String[]
  isActive     Boolean  @default(true)
  type         String?

  owner     User                   @relation("UserOrganizations", fields: [ownerId], references: [id], onDelete: Cascade)
  members   OrganizationMember[]
  followers OrganizationFollower[]
  posts     Post[]                 @relation("OrganizationPosts")
}

model OrganizationMember {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  userId         String       @db.ObjectId
  organizationId String       @db.ObjectId
  user           User         @relation("OrganizationMembers", fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

model OrganizationFollower {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  userId         String @db.ObjectId
  organizationId String @db.ObjectId

  user         User         @relation("UserOrganizationFollowers", fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

enum PostType {
  POST
  EVENT
}

enum PostStatus {
  ACTIVE
  DRAFT
  ARCHIVED
}

enum CommentStatus {
  ACTIVE
  DISABLE
}

model Post {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  attachments   Media[]
  eventName     String?
  content       String
  type          PostType      @default(POST)
  status        PostStatus    @default(ACTIVE)
  commentStatus CommentStatus @default(ACTIVE)
  isPromoted    Boolean       @default(false)
  location      String?
  eventDate     DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  viewsCount    Int @default(0)
  likesCount    Int @default(0)
  CommentsCount Int @default(0)

  userId String? @db.ObjectId
  user   User?   @relation("UserPosts", fields: [userId], references: [id], onDelete: Cascade)

  organizationId String?       @db.ObjectId
  organization   Organization? @relation("OrganizationPosts", fields: [organizationId], references: [id], onDelete: Cascade)

  tags     PostTag[] @relation("PostTags")
  likes    Like[]    @relation("PostLikes")
  comments Comment[] @relation("PostComments")
}

enum MediaType {
  IMAGE
  VIDEO
}

model Media {
  id     String    @id @default(auto()) @map("_id") @db.ObjectId
  postId String?   @db.ObjectId
  post   Post?     @relation(fields: [postId], references: [id], onDelete: SetNull)
  type   MediaType
  url    String

  createdAt DateTime @default(now())

  @@map("post_media")
}

model Tag {
  id    String    @id @default(auto()) @map("_id") @db.ObjectId
  name  String    @unique
  posts PostTag[] // PostTag ile ilişki
}

model PostTag {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  postId String @db.ObjectId
  tagId  String @db.ObjectId

  post Post @relation("PostTags", fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
}

model Like {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  userId    String  @db.ObjectId
  postId    String? @db.ObjectId
  commentId String? @db.ObjectId

  user    User     @relation("UserLikes", fields: [userId], references: [id], onDelete: Cascade)
  post    Post?    @relation("PostLikes", fields: [postId], references: [id], onDelete: Cascade)
  comment Comment? @relation("CommentLikes", fields: [commentId], references: [id], onDelete: Cascade) // Yorum ile ilişki
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  postId    String   @db.ObjectId
  post      Post     @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
  userId    String?  @db.ObjectId
  user      User?    @relation("UserComments", fields: [userId], references: [id], onDelete: Cascade)

  likes Like[] @relation("CommentLikes")
}

enum NotificationType {
  LIKE
  COMMENT
  MENTION
}

model Notification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId // Bildirimi alan kullanıcı
  actorId    String   @db.ObjectId // İşlemi yapan kullanıcı (beğenen/yorum yapan)
  type       NotificationType   // "like", "comment", "follow", vb.
  content    String   // Bildirim içeriği
  postId     String?  @db.ObjectId // Post ile ilişkili bildirimlerde post ID
  commentId  String?  @db.ObjectId // Yorum ile ilişkili bildirimlerde yorum ID
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  // İlişkiler
  user       User     @relation("NotificationReceiver", fields: [userId], references: [id])
  actor      User     @relation("NotificationActor", fields: [actorId], references: [id])

  @@index([userId])
  @@index([actorId])
}


////////////////////////////////////////////////////////////////// REALTIME MESSAGE CHAT SECTION ////////////////////////////////////////////////////////////////////////

model Server {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  imageUrl  String
  inviteCode String

  profileId String @db.ObjectId
  profile   User @relation("UserServers", fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members Member[] @relation("ServerMembers")
  channels Channel[] @relation("ServerChannels")


  @@index([profileId])
}

enum MemnerRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  role MemnerRole @default(GUEST)

  profileId  String @db.ObjectId
  profile    User @relation("UserMembers", fields: [profileId], references: [id], onDelete: Cascade)

  serverId  String @db.ObjectId
  server    Server @relation("ServerMembers", fields: [serverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChanelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  type      ChanelType @default(TEXT)

  profileId  String @db.ObjectId
  profile    User @relation("UserChannels", fields: [profileId], references: [id], onDelete: Cascade)

  serverId  String @db.ObjectId
  server    Server @relation("ServerChannels", fields: [serverId], references: [id], onDelete: Cascade)

  createdAd DateTime @default(now())
  updatedAd DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}
